different base number systems
10
	yup
2
	ok
	preface with 0b
16 
	0-f
	preface with 0x
	0xf2a8
	     8*16^0	=8
	    10*16^1	=160
	   2*16^2	=512
	  15*16^3	=61440
			=62120
	hex-binary conversion
	each hex digit is 4 binary digits
	0x6a4e
	6=0110
	a=1010
	4=0100
	e=1110
		=0b0110 1010 0100 1110
	       	=27214 (decimal)

decimal to binary
convert 26 decimal to binary
	26/2 (use long division)
	just keep dividing by 2 and the remainder is the digit (read backward)
	11010

decimal to hex
424 (dec to hex)
424/16 (same as binary just divide by 16 instead of 2)
=1A8

verilog
data types
	wire
		represents a physical wire or connection between components / gates
		cannot 'store' a value
	reg
		holds the same value until it is reassigned a new value
		cannot have continous assignment
		must add 'reg' declaration to ouputs
(defaults are wires)
output X  (wire)
output reg X (reg)

verilog number formats
numbers default to decimal
	1 or 0 doesn't matter
	101 is considered decimal
	to specify binary add bit number and 'b
	3'b101 is a 3 bit binary nyumber (5)
	3'b101 = 5 (can be used interchangeably)
verilog memory
single bit: Scaler
multiple bits: Vector (Bus)

Endian
	defines hwo data is stored in memory
	Big Endian - Most significant bit (MSB) saved first(left first)  big---->small
	Little Endian - least significant bit (LSB) save first (right first) small--->big
	4'b1010
	BE = 1010
	LE = 0101

verilog vectors (buses)
	can be of type wire or type reg
	define Endianness with size
wire [7:0] A 
	8 bit buss
	wire that goes from bit 7 to bit 0 called A
	Big Endian MSB (bit 7) saved first
wire [0:7] B
	8 bit buss (0 to 7)
	Little Endian, LSB (bit 0) saved first

reg[3:0] A
	4 bits
	A
	  3  2  1  0

reg [0:3] B
	B
	  0  1  2  3  4

a=4'b1010 
a= 1010
b=4'b1010
b= 0101

A = 4'b1010	A  1  0  1  0
		   3  2  1  0	
address individual bits of A
A[3]=1	a[2]=0
a[1]=1	a[0]=0

concatenate bits
	c=1 d=0 e=2'b11
x={c,d,e}=4'b1011

y={a[1:0],a[2:]}= 4'b1001



Structural Design
	model individual gates and wires
	typically no order of commands or assignments
	
behavioral design
	proceduaral design: flow of steps in a specific order
	initial block
		steps run only once at teh beginning (power on)
	always block
		steps repeat on signal change
	can have multiple "initial" or "always" blocks

verilog code blocks
initial
	multiple initial blocks that run concurrently
	runs immediately on boot or power up
always @ (sensitivity list)
	can have mutiple always blocks that run concurrently
	code in the always blocks does not run initially
	code in the always block runs every time an input in the sensitivity list changes (0 to 1 or 1 to 0)
	sensitivity list can be any selection of inputs, wiers, or regs

behavioral
must have an "always" or "initial block
	we will usually just use always 
conditional statements
	if ... else
	case
		switch statement?
loops
	for
	while

logical operators
! 	NOT
&&	AND
||	OR
==	Equal
!=	not equal
< 	Less than
>	greater than
<=	less than or equal
>=	greater or equal

Structural design
assign f=a&b;
assign y=b|c;
create and with input a,b output f
create or with input b, c output y

behavioral
always @(a or b or c)
	begin
		if((a==1)&&(b==1))
			f=1;
		else
			f=0;
		if((b==1)||(c==1))
			y=1;
		else
			y=0;
	end

always repeats when a, b, or c repeats
f and y update each time
if a=1 and b=1, f=1 
otherwise f=0
if b=1 or c=1 y=1
otherwise f=1


if... else
if (a==1)
	x=c;
else
	x=d;
################
if(a)
	x=c;
else
	x=d
(same thing twice)

##################
if(a==1)
	x=c;
else if (b==1)
	x=d;
else
	x=e;
#####################
if((a==1)&&b==1)
	x=c;
else 
	x=d;

#################
if((a&B)==1
	begin
		x=c;
		f=a;
	end
else
	begin
		x=d;
		f=b;
	end
begin...end
works like {...}
#############
Case Statemeent

reg[1:0} select;

case(select)
	2'b00:f=a&b;
	2'b01:f=a|b;
	2'b10:f=a^b;
	default:f=a;
endcase
(Switch statement)
################
loops

reg[3:0] count;

for (count=0;count<4'b1111;count=count+1)
	begin 
		...
	end
count ++ does NOT work
while loop
while(a==0)
	begin
	...
	end
